<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://v1ki.top/</id>
    <title>浮生闲记</title>
    <updated>2019-11-27T17:42:15.326Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://v1ki.top/"/>
    <link rel="self" href="http://v1ki.top//atom.xml"/>
    <subtitle>要么有趣,要么老去.</subtitle>
    <logo>http://v1ki.top//images/avatar.png</logo>
    <icon>http://v1ki.top//favicon.ico</icon>
    <rights>All rights reserved 2019, 浮生闲记</rights>
    <entry>
        <title type="html"><![CDATA[Swift 操作符使用扩展]]></title>
        <id>http://v1ki.top//post/swift-cao-zuo-fu-ding-yi-yu-fa-xiao-ti-shi</id>
        <link href="http://v1ki.top//post/swift-cao-zuo-fu-ding-yi-yu-fa-xiao-ti-shi">
        </link>
        <updated>2019-11-27T15:06:31.000Z</updated>
        <content type="html"><![CDATA[<p>   在Swift 中有很多有趣的语法，比如说 可以使用 <a href="https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#grammar_prefix-operator-declaration"><code>操作符</code></a> 作为函数。 下面是操作符的三种类型：</p>
<ul>
<li>prefix    前缀操作符</li>
<li>infix     中缀操作符</li>
<li>postfix   后缀操作符</li>
</ul>
<p>   其中 prefix 和 postfix 为一元操作符，infix 为 二元操作符。</p>
<p>   现在有一个 结构体 如下：</p>
<pre><code>struct Person {
    var name : String = &quot;&quot;
    var birthday : String = &quot;2017-01-03&quot;
    var phone : String = &quot;110&quot;
    var email : String = &quot;xxxx@qq.sina.com.cn&quot;
    var money : Double = 0
    var age : Double = 0
    var sex : Int = 0
}
</code></pre>
<p>   通常情况下，我们想要访问属性，都是通过 <code>点属性名</code> 来调用，如果有操作符的情况下，我们可以将这一步放到操作符中。使用方法如下：</p>
<ul>
<li><code>prefix</code> 前缀操作符 获取 <code>Person</code> 的 <code>name</code> 属性</li>
</ul>
<pre><code>prefix operator +-+
extension Person {
    static prefix func +-+ (right: Person) -&gt;  String {
        return right.name
    }
}
</code></pre>
<ul>
<li><code>postfix</code> 后缀操作符 获取 <code>Person</code> 的 <code>birthday</code> 属性</li>
</ul>
<pre><code>postfix operator +-+
extension Person {
    static postfix func +-+ (left: Person) -&gt;  String {
        return left.birthday
    }
}
</code></pre>
<p>   另外，如果我们需要将 两个<code>Person</code> 的某几项属性统计起来的话，我们可以使用 <code>infix</code>  中缀操作符来实现。</p>
<ul>
<li><code>infix</code> 中缀操作符  计算  <code>Person</code> 的 <code>money</code> 和 与 <code>age</code> 和的比</li>
</ul>
<pre><code>infix operator +/+
extension Person {
    static func +/+ (left: Person,right: Person) -&gt;  Double {
        return (left.money + right.money) / (left.age + right.age)
    }
}
</code></pre>
<p>   由于，<code>prefix</code> 以及 <code>postfix</code>  都是一元操作符，所以没有优先级的概念，但是如果 <code>prefix</code> 以及 <code>postfix</code> 一起使用的时候，会先计算 <code>postfix</code> 然后再计算 <code>prefix</code> 。<code>infix</code> 有优先级，如果需要使用的话，请查看 <code>precedencegroup</code> 相关的资料。</p>
<p>   特别需要注意的是，不能重写的操作符有 ：</p>
<ul>
<li><code>=, -&gt;, //, /*, */, .</code>  这些操作标识 <code>prefix ，postfix， infix</code> 都不能重写</li>
<li><code>prefix</code> 不能重写  <code>&lt;, &amp;, ?</code></li>
<li><code>infix</code> 不能重写  <code>?</code></li>
<li><code>postfix</code>  不能重写  <code>&gt;, !, ?</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SwiftUI iOS 下自定义NavigationView 的Title]]></title>
        <id>http://v1ki.top//post/swiftui-ios-xia-zi-ding-yi-navigationview-de-title</id>
        <link href="http://v1ki.top//post/swiftui-ios-xia-zi-ding-yi-navigationview-de-title">
        </link>
        <updated>2019-11-26T13:53:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="引文">引文</h2>
<p>  正常情况下，SwiftUI 中的 <code>NavigationView</code> 的 <code>navigationBarTitle</code> 没有办法进行过多的设置，但是在实际应用场景中，通常需要设置比较丰富的属性，以及交互。</p>
<h2 id="解决思路">解决思路</h2>
<p>  首先，上面的问题在 UIKit 中其实是非常好解决的问题，而且光靠 SwiftUI 无法解决的问题，这时我们可以借助 UIKit 来解决。<br>
  SwiftUI 使用 UIKit 的时候，可以实现 <code>UIViewControllerRepresentable</code> 以及  <code>UIViewRepresentable</code> 来整合 UIKit 到 SwiftUI 的视图中。此时我们需要使用的是 <code>UIViewController</code> ，所以对应的就是 <code>UIViewControllerRepresentable</code> 。<br>
  通过 <code>UIViewController</code> 的 <code>navigationController</code> 属性可以得到 <code>UINavigationController</code> , 进而使用 <code>topViewController</code> 属性进一步得到有效的 <code>UIViewController</code> , 然后将自定义 <code>titleView</code> 设置给 <code>UIViewController.navigationItem.titleView</code> .</p>
<h2 id="方案一">方案一</h2>
<p>   实现 <code>UIViewControllerRepresentable</code>, 在 <code>makeUIViewController</code> 中 返回 <code>UIViewController()</code> ,然后在 <code>updateUIViewController</code> 中设置 <code>titleView</code> , 设置了之后 , 当界面刷新时 , 会调用 <code>updateUIViewController</code> , 然后按需调用动画  ,代码如下：</p>
<pre><code>
struct NavigationConfigurator : UIViewControllerRepresentable {
    
    class Coordinator {
        
        var callback : (Int) -&gt; Void = {_ in }
        @objc func tapFollow(_ gr : UITapGestureRecognizer ) {
            self.callback(0)
        }
        
        @objc func tapHot(_ gr : UITapGestureRecognizer ) {
            self.callback(1)
        }
    }
    
    /// Creates a `Coordinator` instance to coordinate with the
    /// `UIViewController`.
    ///
    /// `Coordinator` can be accessed via `Context`.
    func makeCoordinator() -&gt; Coordinator {
        let handler = Coordinator()

        handler.callback = {state in
            self.currentState = state
        }
        return handler
    }
    
    
    var configure : (UINavigationController) -&gt; Void = {_ in }
    @Binding var currentState : Int
    
    
    func makeUIViewController(context: UIViewControllerRepresentableContext&lt;NavigationConfigurator&gt;) -&gt; UIViewController{
        return UIViewController()
        
    }
    
    func updateUIViewController(_ uiViewController: UIViewController, context: UIViewControllerRepresentableContext&lt;NavigationConfigurator&gt;) {
        if let nv = uiViewController.navigationController {
            
            
            if let vc = nv.topViewController {
                
                if vc.navigationItem.titleView == nil {
                    vc.navigationItem.titleView = getTitleView(context.coordinator)
                }
                else {
                    let titleView = vc.navigationItem.titleView
                    if let lineView = titleView?.viewWithTag(1) ,let followBtn = titleView?.viewWithTag(2) as? UIButton , let hotBtn = titleView?.viewWithTag(3) as? UIButton {
                        UIView.animate(withDuration: 0.3, animations: {
                            lineView.frame = CGRect(x:self.currentState == 1 ? 100 : 40 , y:38 ,width:35 ,height: 3)

                            followBtn.setTitleColor( self.currentState == 1 ? UIColor.gray : UIColor.black, for: .normal)
                            hotBtn.setTitleColor(self.currentState == 0 ? UIColor.gray : UIColor.black, for: .normal)
                        })
                    }
                }
                
            }
        }
        
        
    }
    
    
    func getTitleView(_ handler : Coordinator) -&gt; UIView {

        let titleView = UIView()
        titleView.frame = CGRect(x:0,y:0 ,width : 200 ,height: 50)
        
        
        let lineView = UIView()
        lineView.frame = CGRect(x:self.currentState == 1 ? 100 : 40 , y:38 ,width:35 ,height: 3)
        lineView.backgroundColor = UIColor.red
        lineView.layer.cornerRadius = 1.5
        lineView.tag = 1
        titleView.addSubview(lineView)
        
        
        let followBtn = UIButton(frame: CGRect(x:0,y:0 ,width : 75 ,height: 50))
        followBtn.contentHorizontalAlignment = .right
        followBtn.setTitle(&quot;关注&quot;, for: .normal)
        followBtn.setTitleColor( self.currentState == 1 ? UIColor.gray : UIColor.black, for: .normal)
        followBtn.addTarget(handler, action: #selector(Coordinator.tapFollow(_:)), for: .touchUpInside)
        followBtn.tag = 2
        titleView.addSubview(followBtn)
        
        
        let hotBtn = UIButton(frame: CGRect(x:100,y:0 ,width : 75 ,height: 50))
        hotBtn.contentHorizontalAlignment = .left
        hotBtn.setTitle(&quot;热门&quot;, for: .normal)
        hotBtn.setTitleColor(self.currentState == 0 ? UIColor.gray : UIColor.black, for: .normal)
        hotBtn.addTarget(handler, action: #selector(Coordinator.tapHot(_:)), for: .touchUpInside)
        hotBtn.tag = 3
        titleView.addSubview(hotBtn)
        return titleView
    }
    
}

</code></pre>
<p>  这种实现方法大部分使用的是 UIKit 部分的内容，界面、点击事件以及动画效果都是放在UIKit中实现的。所以说如果希望在 SwiftUI 中处理界面及点击事件的话，这种方法可能不太适合。</p>
<h2 id="方案二">方案二</h2>
<p>  首先自定义一个 <code>UIViewController</code> , 声明一个 <code>UIHostingController</code> 用于保存 SwiftUI 的 <code>View</code> , 在其生命周期 <code>viewWillAppear</code> 中将 <code>UIHostingController</code> 的 view 设置为 <code>navigationItem</code> 的 <code>titleView</code> 。 实现 <code>UIViewControllerRepresentable</code>, 在 <code>makeUIViewController</code> 中 返回刚才自定义的  <code>UIViewController</code> , 然后在 <code>updateUIViewController</code> 中更新 <code>UIHostingController</code> 的 <code>rootView</code> 。代码如下：</p>
<pre><code>
struct CustomTitleView : View {
    @Binding var currentState : Int
    var body : some View {
        VStack(alignment: .leading) {
            
            HStack(spacing : 30) {
                
                Text(&quot;关注&quot;)
                    .frame(width:75 ,alignment: .trailing)
                    .onTapGesture {
                        self.currentState = 0
                }
                Text(&quot;热爱&quot;)
                    .frame(width:75,alignment: .leading)
                    .onTapGesture {
                        self.currentState = 1
                }
            }.background(Color.clear)
            
            Color.red.frame(width: 35 ,height: 1 )
                .offset(x: self.currentState == 1 ? 105 : 40)
                .animation(Animation.easeInOut)
            
        }.background(Color.clear)
    }
}

class NewNavigationViewController&lt;Content: View &gt; : UIViewController {
    
    let hostingController : UIHostingController&lt;Content&gt;
    init(rootView: Content) {
        self.hostingController = UIHostingController&lt;Content&gt;(rootView: rootView)
        super.init(nibName: nil, bundle: nil)
    }
    required init?(coder: NSCoder) {
        fatalError(&quot;init(coder:) has not been implemented&quot;)
    }
    override func viewWillAppear(_ animated: Bool) {
        if let nv = self.navigationController {
            
            if let vc = nv.topViewController {
                if vc.navigationItem.titleView == nil {
                    self.hostingController.view.backgroundColor = UIColor.clear
                    vc.navigationItem.titleView =  self.hostingController.view
                }
                
            }
        }
    }
    
}
struct NewNavigationConfigurator&lt;Content&gt; : UIViewControllerRepresentable where Content : View {
    
    var content: () -&gt; Content
    
    @inlinable init(@ViewBuilder content: @escaping () -&gt; Content) {
        self.content = content
    }
    
    func makeUIViewController(context: UIViewControllerRepresentableContext&lt;NewNavigationConfigurator&gt;) -&gt; NewNavigationViewController&lt;Content&gt;{
        return NewNavigationViewController(rootView: self.content())
    }
    func updateUIViewController(_ viewController: NewNavigationViewController&lt;Content&gt;, context: UIViewControllerRepresentableContext&lt;NewNavigationConfigurator&gt;) {
        viewController.hostingController.rootView = self.content()
    }
    
}
</code></pre>
<p>  这种实现方法可以将 Title部分的界面、点击事件以及动画效果放在 SwiftUI 中来实现。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SwiftUI NavigationBar 隐藏]]></title>
        <id>http://v1ki.top//post/swiftui-navigationbar-yin-cang</id>
        <link href="http://v1ki.top//post/swiftui-navigationbar-yin-cang">
        </link>
        <updated>2019-11-14T07:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>虽然在View 中有 <code>navigationBarHidden</code> 的方法，<br>
<img src="http://v1ki.top//post-images/1573717474447.png" alt=""><br>
但是,实际使用时却需要注意，如果没有设置 <code>title</code> 的情况下，<br>
<img src="http://v1ki.top//post-images/1573717482360.jpg" alt=""><br>
就设置 Hidden方法， 是不会生效的。</p>
<figure data-type="image" tabindex="1"><img src="http://v1ki.top//post-images/1573717724985.png" alt=""></figure>
<p>但是。如果设置了<code>title</code> 之后，就可以隐藏了。<br>
<img src="http://v1ki.top//post-images/1573717769286.png" alt=""></p>
<p>另外，需要注意的是API中提到 了。 <code>This modifier only takes effect when this view is inside of and visible within a NavigationView.</code> , 也就是说只能在 <code>NavigationView</code> 中的可见 <code>View</code> 才会生效。</p>
]]></content>
    </entry>
</feed>